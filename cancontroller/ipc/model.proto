syntax = "proto3";

//
// python3 -m grpc_tools.protoc -Icancontroller/ipc --python_out=cancontroller/ipc --grpc_python_out=cancontroller/ipc model.proto
//

package cancontroller.ipc;

service CanController {
  rpc SendGarage(GarageCommand) returns (CommandResponse) {}
  rpc SendAlarm(AlarmControllerCommand) returns (CommandResponse) {}

  rpc RequestTelemetry(DeviceId) returns (Empty) {}
  rpc ReadAttribute(AttributeRequest) returns (AttributeResponse) {}
  rpc WriteAttribute(AttributeRequest) returns (AttributeResponse) {}

  rpc Reset(DeviceId) returns (CommandResponse) {}

  rpc GetDevices(Empty) returns (Devices) {}
  rpc GetDevice(DeviceId) returns (Device) {}
}

/*____________________________________________________________________________________________________________________*/

message DeviceId
{
  uint32 cls = 1;
  uint32 sid = 2;
}

enum Status {
  OK = 0;
  NOK = 1;
  TIMEOUT = 2;
}

message CommandResponse {
  string datetime = 1;

  Status status = 4;
}

message Attribute {
  uint32 key = 1;
  uint32 value = 2;
}

/*____________________________________________________________________________________________________________________*/

enum GarageDoorCommand {
  COMMAND_UNSPECIFIED = 0;
  COMMAND_LEFT = 1;
  COMMAND_RIGHT = 2;
  COMMAND_ALL = 3;
}

message GarageCommand {
  string datetime = 1;

  GarageDoorCommand command = 2;
}

/*____________________________________________________________________________________________________________________*/

enum LightCommand {
  LIGHT_CMD_NONE = 0;
  LIGHT_CMD_ON = 1;
  LIGHT_CMD_OFF = 2;
  LIGHT_CMD_TOGGLE = 3;
}

enum AlarmCommand {
  ALARM_CMD_NONE = 0;
  ALARM_CMD_ENABLE = 1;
  ALARM_CMD_DISABLE = 2;
  ALARM_CMD_RECOVER = 3;
}

enum AlarmModeCommand {
  ALARM_MODE_CMD_NONE = 0;
  ALARM_MODE_CMD_NORMAL = 1;
  ALARM_MODE_CMD_SILENT = 2;
}

enum AlarmSirenCommand {
  ALARM_SIREN_CMD_NONE = 0;
  ALARM_SIREN_CMD_ON = 1;
  ALARM_SIREN_CMD_OFF = 2;
  ALARM_SIREN_CMD_TOGGLE = 3;
}

message AlarmControllerCommand {
  string datetime = 1;

  LightCommand light1 = 2;
  LightCommand light2 = 3;

  AlarmCommand alarm = 4;
  AlarmModeCommand alarm_mode = 5;
  AlarmSirenCommand siren = 6;
}

/*____________________________________________________________________________________________________________________*/


message AttributeRequest {
  DeviceId device = 2;
  uint32 key = 3;
  uint32 value = 4;

  float timeout = 5;  // if timeout == 0.0 then return immediately with status OK
  // if timeout != 0.0 return status TIMEOUT if timeout value exceeded
  // return pending ok if value == write value with WriteAttribute and check key anywhere
}

message AttributeResponse {
  DeviceId device = 1;
  uint32 key = 2;
  uint32 value = 3;

  Status status = 4;

  float response_time = 5;
}

/*____________________________________________________________________________________________________________________*/

message Empty {

}

message DateTime
{
  uint32 seconds = 1;
}

message Device {
  DeviceId deviceid = 1;
  string name = 2;
  uint32 version = 3;

  message Status {
    DateTime last_seen = 1;
    uint32 received = 2;
    uint32 sent = 3;
    bool online = 4;
  }

  Status status = 4;

  repeated int32 raw = 5 [packed=true];

  oneof model {
    GarageDoorModel garage = 6;
    AlarmControllerModel alarm = 7;
  }

  /* list of all retrieved/updated attribute in the current session */
  repeated Attribute attribute = 8;
}

message DeviceResponse {
  oneof dev {
    Device device = 1;
    Empty empty = 2;
  }
}

/*____________________________________________________________________________________________________________________*/

message CustomPCBModel
{
  uint32 r1 = 1;
  uint32 r2 = 2;

  uint32 oc1 = 3;
  uint32 oc2 = 4;

  uint32 in1 = 5;
  uint32 in2 = 6;
  uint32 in3 = 7;
  uint32 in4 = 8;

  float int_temp = 9;
  bool active_int_temp = 10;
  float ext_temp = 11;
  bool active_ext_temp = 12;
}

message GarageDoorModel {
  CustomPCBModel base = 1;

  bool left = 2;
  bool right = 3;
  bool gate = 4;
}

enum AlarmState {
  ALARM_STATE_INACTIVE = 0;
  ALARM_STATE_OBSERVING = 1;
  ALARM_STATE_SOUDNING = 2;
  ALARM_STATE_RECOVERING = 3;
}

enum AlarmMode {
  ALARM_MODE_NORMAL = 0;
  ALARM_MODE_SILENT = 1;
}

message AlarmControllerModel
{
  CustomPCBModel base = 1;

  bool light1 = 2;
  bool light2 = 3;
  bool siren = 4;
  bool inputs_state = 5;
  AlarmState state = 7;
  AlarmMode mode = 8;
}

message Devices {
  repeated Device device = 1;
}